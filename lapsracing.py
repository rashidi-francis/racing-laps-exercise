# -*- coding: utf-8 -*-
"""LapsRacing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MWCVOBveDJ4glx7zqQ5AwqVAchzH7mYT
"""



"""Uma pista de Kart permite 10 voltas para cada um de 6 corredores. Faça um programa que leia os nomes e os tempos (em segundos) de cada volta de cada corredor. Ao final, o programa deve informar:

De quem foi a melhor volta da prova, e em que volta.
Classificação final em ordem crescente.
Qual foi a volta com a média mais rápida
"""

import numpy as np

#Nome dos corredores
nomes_corredores = ["Gariel", "Francis", "Alexandre", "Felipe", "Tha", "Joao"]

# Dados dos tempos de cada corredor
gabriel = np.array([80, 50, 120, 60, 90, 160, 200, 180, 310, 60])
francis = np.array([120, 45, 60, 55, 75, 90, 95, 60, 50, 60])
alexandre = np.array([80, 80, 80, 90, 80, 80, 300, 80, 80, 80])
felipe = np.array([240, 240, 200, 240, 440, 240, 240, 240, 240, 240])
tha = np.array([320, 120, 320, 100, 320, 320, 320, 320, 320, 320])
joao = np.array([160, 60, 260, 160, 460, 160, 360, 160, 60, 160])

#Matriz de tempos de voltas
tempos_voltas=np.array([gabriel, francis, alexandre, felipe, tha, joao])

#Função para encontrar a melhor volta e qual volta
def melhor_volta(corredores):
    melhor_tempo = np.min(corredores)
    corredor, volta = np.where(corredores == melhor_tempo)
    return corredor[0], volta[0] + 1  # Adicionamos 1 para compensar o índice base 0

# Encontrando a melhor volta da prova
corredor, volta = melhor_volta(tempos_voltas)
print(f"A melhor volta da prova foi de {nomes_corredores[corredor]} na volta {volta} com {tempos_voltas[corredor, volta - 1]} segundos.")

# Calculando a média de cada volta
media_voltas = np.mean(tempos_voltas, axis=0)

# Encontrando a volta com a média mais rápida
volta_media_rapida = np.argmin(media_voltas) + 1
print(f"A volta com a média mais rápida foi a volta {volta_media_rapida} com tempo médio de {media_voltas[volta_media_rapida - 1]} segundos.")

# Função para imprimir a classificação final em ordem crescente
def classificacao_final(corredores):
    return np.argsort(np.sum(corredores, axis=1)) # Adicionamos 1 para compensar o índice base 0

# Função para imprimir a classificação final em ordem crescente
def classificacao_final(corredores):
    return np.argsort(np.sum(corredores, axis=1))

# Imprimindo a classificação final em ordem crescente
classificacao = classificacao_final(tempos_voltas)
print("Classificação final em ordem crescente:")
for posicao, corredor_idx in enumerate(classificacao):
    print(f"{posicao + 1}. {nomes_corredores[corredor_idx]}")